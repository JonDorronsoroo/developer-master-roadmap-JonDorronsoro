---
import SimplePageHeader from "../../components/SimplePageHeader.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import '../../styles/formulario.css';
import { getAllRecursos } from '../../database/consultas.ts';
import { getAllCategorias } from '../../database/consultas.ts';
import { getEtiquetas } from '../../database/consultas.ts';

const user = Astro.locals.user;
if (!user) {
    return Astro.redirect("/auth/signin");
}

const categorias = await getAllCategorias();
var categoriasNames = categorias?.map((categoria) => categoria.idNombre);

const recursos = await getAllRecursos();
var recursosNames = recursos?.map((recurso) => recurso.titulo);

const etiquetas = await getEtiquetas();
const etiquetasList = etiquetas?.map((etiqueta) => `${etiqueta.tipo}: ${etiqueta.valorEtiqueta}`);
---

<BaseLayout title='Onboarding' permalink={'/enviarOpinion'}>
    <SimplePageHeader
        title='Developer Roadmaps'
        description='Incluir en el almacenamiento de la empresa un nuevo recurso:'
    />

    <form id="recursoForm" class="form-container">
        <fieldset>
            <label class="required-field" for="titulo">Título:</label>
            <input
                type="text"
                id="titulo"
                name="titulo"
                required
                placeholder="Título del recurso" aria-required="true"
            />

            <label class="required-field" for="enlaceFichero">Enlace al fichero:</label>
            <input
                type="text"
                id="enlaceFichero"
                name="enlaceFichero"
                required
                placeholder="Enlace del fichero" aria-required="true"
            />

            <label class="required-field" for="interno">¿Este recurso ha sido creado por LKS?:</label>
            <div class="radio-container">
                <input type="radio" id="interno" name="internoExterno" value="true" required />
                <label for="interno">Sí</label>

                <input type="radio" id="externo" name="internoExterno" value="false" required />
                <label for="intermedio">No</label>
            </div>

            <input type="hidden" id="categoria" name="categoria">

            <label class="required-field" for="categoriaLabel">Elige una categoría:</label>
            <input type="text" id="input-box" placeholder="Buscar categoría" autocomplete="off">
            <div id="custom-dropdown" class="custom-dropdown">
                <ul id="dropdown-options" class="dropdown-options">
                    <li value="Global">Ninguna</li>
                    {categoriasNames?.map((categoria: string) => (
                        <li value={categoria}>{categoria}</li>
                    ))}
                </ul>
            </div>
        </fieldset>

        <fieldset>
            <label for="descripcion">Descripción:</label>
            <textarea
                id="descripcion"
                name="descripcion"
                cols="50"
                rows="5"
                placeholder="Descripción..."
            ></textarea>

            <label for="otrosRecursos">¿Está relacionado con algún otro?:</label>
            <input type="hidden" id="recursoRelacion" name="recursoRelacion">
            <input type="text" id="input-boxRecurso" placeholder="Buscar recurso relacionado..." autocomplete="off">
            <div id="custom-dropdownRecurso" class="custom-dropdown">
                <ul id="dropdown-optionsRecurso" class="dropdown-options">
                    {recursosNames?.map((recurso: string) => (
                        <li value={recurso}>{recurso}</li>
                    ))}
                </ul>
            </div>

            <label for="etiquetas">Escoge las etiquetas:</label>
            <input type="text" id="search-etiquetas" placeholder="Buscar etiqueta" autocomplete="off">
            <div id="etiquetas-dropdown" class="custom-dropdown">
                <ul id="etiquetas-options" class="dropdown-options">
                    {etiquetasList?.map((etiqueta: string) => (
                        <li>
                            <label>
                                <input type="checkbox" class="etiqueta-checkbox" name="etiqueta" value={etiqueta} /> {etiqueta}
                            </label>
                        </li>
                    ))}
                </ul>
            </div>
        </fieldset>

        <div class="button-container">
            <button type="submit">Guardar</button>
        </div>

        <div id="correct-message" class="message success"></div>
        <div id="error-message" class="message error"></div>
    </form>

    <script>
    import { setupDropdown } from '../../utils.js';

    // Initialize dropdowns
    setupDropdown('input-box', 'custom-dropdown', 'categoria');
    setupDropdown('input-boxRecurso', 'custom-dropdownRecurso', 'recursoRelacion');
    setupDropdown('search-etiquetas', 'etiquetas-dropdown', 'etiquetas-options');

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('recursoForm');

        form.addEventListener('submit', async (event) => {
            event.preventDefault();

            // Recoger los datos del formulario
            const titulo = document.getElementById('titulo').value;
            const enlaceFichero = document.getElementById('enlaceFichero').value;
            const descripcion = document.getElementById('descripcion').value;
            const interno = document.querySelector('input[name="internoExterno"]:checked')?.value;
            const categoria = document.getElementById('categoria').value;
            const recursoRelacion = document.getElementById('recursoRelacion').value;
            const etiquetasSeleccionadas = Array.from(
                document.querySelectorAll('.etiqueta-checkbox:checked')
            ).map(checkbox => checkbox.value);

            // Log de etiquetas seleccionadas
            console.log("Etiquetas seleccionadass:", etiquetasSeleccionadas);

            // Validar campos obligatorios
            if (!titulo || !enlaceFichero || !categoria) {
                alert("Por favor, rellena todos los campos obligatorios.");
                return;
            }

            if (etiquetasSeleccionadas.length === 0) {
                alert("Por favor, selecciona al menos una etiqueta.");
                return;
            }

            // Preparar datos para enviar
            const formData = new FormData();
            formData.append('titulo', titulo);
            formData.append('descripcion', descripcion);
            formData.append('enlaceFichero', enlaceFichero);
            formData.append('internoExterno', interno);
            formData.append('categoria', categoria);
            formData.append('recursoRelacion', recursoRelacion);
            formData.append('etiquetas', JSON.stringify(etiquetasSeleccionadas));

            try {
                const response = await fetch('/api/addRecurso', {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();

                if (response.ok) {
                    alert(result.message);
                    window.location.href = '/home'; // Redirigir tras éxito
                } else {
                    document.getElementById('error-message').textContent = result.message || 'Error al enviar los datos.';
                    document.getElementById('error-message').style.display = 'block';
                    document.getElementById('correct-message').style.display = 'none';
                }
            } catch (error) {
                console.error("Error al enviar los datos:", error);
                document.getElementById('error-message').textContent = 'Error interno al procesar los datos.';
                document.getElementById('error-message').style.display = 'block';
                document.getElementById('correct-message').style.display = 'none';
            }
        });
    });
</script>


</BaseLayout>
